// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id         String   @id @default(uuid())
  username   String   @unique
  name       String
  password   String
  email      String?  @unique
  avatar_url String?
  created_at DateTime @default(now())

  accounts Account[]
  sessions Session[]
  reviews  Review[]
  comments Comment[]
  ratings  Rating[]

  @@map("users")
}

model Account {
  id                  String  @id @default(cuid())
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String? @db.Text
  access_token        String? @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String? @db.Text
  session_state       String?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@index([user_id])
  @@map("accounts")
}

model Session {
  id            String   @id @default(cuid())
  session_token String   @unique
  user_id       String
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("sessions")
}

model Review {
  id          String   @id @default(uuid())
  title       String
  description String?
  thumbnail   String?
  link        String?
  bacth       String?
  album_link  String
  price       Float
  weight      Float
  created_at  DateTime @default(now())

  user     User      @relation(fields: [user_id], references: [id])
  user_id  String
  comments Comment[]
  ratings  Rating[]

  @@index([user_id])
  @@map("reviews")
}

model Comment {
  id         String   @id @default(uuid())
  content    String
  redLike    Int      @default(0)
  greenLike  Int      @default(0)
  created_at DateTime @default(now())

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  review    Review @relation(fields: [review_id], references: [id])
  review_id String

  @@index([user_id])
  @@index([review_id])
  @@map("comments")
}

model Rating {
  id         String   @id @default(uuid())
  type       String
  created_at DateTime @default(now())

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  review    Review @relation(fields: [review_id], references: [id])
  review_id String

  @@index([user_id])
  @@index([review_id])
  @@map("ratings")
}
